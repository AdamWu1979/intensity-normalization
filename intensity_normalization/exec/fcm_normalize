#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
intensity_normalization.exec.fcm_normalize

command line executable for fcm intensity normalization routine

Author: Jacob Reinhold (jacob.reinhold@jhu.edu)
Created on: May 08, 2018
"""

from __future__ import print_function, division

import argparse
import logging
import os
import sys

from intensity_normalization.errors import NormalizationError
from intensity_normalization.normalize import fcm
from intensity_normalization.utilities import io


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--image', type=str, required=True,
                        help='path to a nifti MR image of the brain')
    parser.add_argument('-m', '--brain-mask', type=str, default=None,
                        help='path to a nifti brain mask for the image, '
                             'provide this if not providing WM mask, (step 1)')
    parser.add_argument('-w', '--wm-mask', type=str, default=None,
                        help='path to a nifti mask of the WM (found through FCM), '
                             'provide this if not providing the brain mask (step 2)')
    parser.add_argument('--norm-value', type=float, default=1000,
                        help='normalize the WM of the image to this value (default 1000)')
    parser.add_argument('-v', '--verbosity', action="count",
                        help="increase output verbosity (e.g., -vv is more than -v)")
    args = parser.parse_args()
    if not (args.brain_mask is None) ^ (args.wm_mask is None):
        raise NormalizationError('Only one of {brain mask, wm mask} should be given')
    return args


def main():
    args = parse_args()
    if args.verbosity == 1:
        level = logging.getLevelName('INFO')
    elif args.verbosity >= 2:
        level = logging.getLevelName('DEBUG')
    else:
        level = logging.getLevelName('WARNING')
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=level)
    logger = logging.getLogger(__name__)
    try:
        img = io.open_nii(args.image)
        dirname, base, _ = io.split_filename(args.image)
        if args.brain_mask is not None:
            brain_mask = io.open_nii(args.brain_mask)
            wm_mask = fcm.find_wm_mask(img, brain_mask)
            outfile = os.path.join(dirname, base + '_wmmask.nii.gz')
            io.save_nii(wm_mask, outfile, is_nii=True)
        if args.wm_mask is not None:
            wm_mask = io.open_nii(args.brain_mask)
            normalized = fcm.fcm_normalize(img, wm_mask, args.norm_value)
            outfile = os.path.join(dirname, base + '_norm.nii.gz')
            io.save_nii(normalized, outfile, is_nii=True)
        return 0
    except Exception as e:
        logger.exception(e)
        return 1


if __name__ == '__main__':
    sys.exit(main())
